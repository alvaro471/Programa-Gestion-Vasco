/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package igu;

import java.awt.BorderLayout;
import java.awt.Component;
import java.io.File;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author user
 */
public class interfazEnumerar2 extends javax.swing.JFrame {
    
    
    private DefaultTableModel modelo;  // Necesitamos acceso global al modelo
    private JTable tabla;  // Necesitamos acceso global a la tabla para actualizarla
    
    public interfazEnumerar2() {
        initComponents();
        // Configuramos el layout a null para tener control total de las posiciones
        this.setLayout(null);
        this.setSize(800, 500);  // Ajusta el tamaño de la ventana a lo que necesites
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Crear los nombres de columnas
        String[] columnas = {"Nombre del archivo", "Etapa", "Acción"};

        // Simulación de archivos (puedes cargar archivos reales aquí)
        File carpeta = new File("C:\\Users\\user\\Desktop\\RD\\RD 83-2024");

        if (carpeta.exists() && carpeta.isDirectory()) {
            System.out.println("Carpeta encontrada: " + carpeta.getAbsolutePath());

            File[] archivos = carpeta.listFiles();
            if (archivos != null) {
                System.out.println("Archivos encontrados: " + archivos.length);
            } else {
                System.out.println("¡La lista de archivos es null!");
            }

            // Aquí va la lógica para llenar la tabla
            Object[][] datos = new Object[archivos.length][3];

            for (int i = 0; i < archivos.length; i++) {
                datos[i][0] = archivos[i].getName();
                datos[i][1] = "Selecciona una etapa";
                datos[i][2] = "Aceptar";
            }

            modelo = new DefaultTableModel(datos, columnas) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return column == 1 || column == 2;  // Solo editable la columna 1 (etapa) y la 2 (botón)
                }
            };

            tabla = new JTable(modelo);

            // ComboBox para la columna 1 (Etapa)
            String[] etapas = {"Etapa 1", "Etapa 2", "Etapa 3"};
            TableColumn comboColumn = tabla.getColumnModel().getColumn(1);
            comboColumn.setCellEditor(new DefaultCellEditor(new JComboBox<>(etapas)));

            // Botón en la columna 2 (Aceptar)
            TableColumn botonColumn = tabla.getColumnModel().getColumn(2);
            botonColumn.setCellRenderer(new ButtonRenderer());
            botonColumn.setCellEditor(new ButtonEditor(new JCheckBox()));

            // Agregar la tabla a un JScrollPane
            JScrollPane scrollPane = new JScrollPane(tabla);
            // Usamos setBounds() para controlar la posición y el tamaño manualmente
            scrollPane.setBounds(20, 100, 700, 300); // Ajusta el tamaño y la posición del JScrollPane
            this.add(scrollPane);  // Agregar el JScrollPane al JFrame

            // Aseguramos que la interfaz se repinte
            this.revalidate();
            this.repaint();
        } else {
            System.out.println("❌ Carpeta NO encontrada o NO es directorio.");
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel1.setLayout(null);
        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 650, 490);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Renderer para el botón "Aceptar"
    class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setText("Aceptar");
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                                                       boolean isSelected, boolean hasFocus, int row, int column) {
            return this;
        }
    }

    // Editor para el botón "Aceptar"
    class ButtonEditor extends DefaultCellEditor {
        protected JButton button;
        private boolean clicked;

        public ButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton("Aceptar");
            button.addActionListener(e -> fireEditingStopped());
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                                                     boolean isSelected, int row, int column) {
            clicked = true;
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            if (clicked) {
                // Acción cuando se hace clic en "Aceptar"
                System.out.println("Botón clickeado en la fila.");
            }
            clicked = false;
            return "Aceptar";
        }
    }
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(interfazEnumerar2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new interfazEnumerar2().setVisible(true));
    }
    // Función para forzar la actualización de la tabla
    public void actualizarTabla(int fila, String etapaSeleccionada) {
        // Actualizamos el valor de la etapa seleccionada en la fila correspondiente
        modelo.setValueAt(etapaSeleccionada, fila, 1);

        // Forzar que la interfaz se repinte
        SwingUtilities.invokeLater(() -> {
            // Después de realizar la acción, forzamos a que el componente se repinte
            revalidate();
            repaint();
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
